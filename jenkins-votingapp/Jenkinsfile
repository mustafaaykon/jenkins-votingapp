pipeline {
    agent {    
        kubernetes {
          yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: maven
                image: maven:alpine
                command:
                - cat
                tty: true
              - name: docker
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: /var/run/docker.sock
                  name: docker-sock
              - name: awscli
                image: docker:latest
                command:
                - sleep
                - infinity
                tty: true
                stdin: true
                volumeMounts:
                - mountPath: /var/run/docker.sock
                  name: docker-sock
                - mountPath: /usr/local/bin/docker
                  name: docker-bin
            volumes:
            - name: docker-sock
              hostPath:
                path: /var/run/docker.sock
            - name: docker-bin
              hostPath:
                path: /usr/bin/docker

            '''
        }
    }
    environment {
        ECR_REPO_REGISTRY = 'public.ecr.aws/u7n2x8y0/public_votingapp'
    }
    stages {
        // stage ('Login to ECR') {
        //     steps {
        //         withAWS(region: 'us-east-1'){
        //             script{
        //                 sh "aws ecr get-login-password --region my_region | docker login --username AWS --password-stdin public.ecr.aws/u7n2x8y0"
        //                 def login = ecrLogin()
        //                 }
        //             }
        //         }
        //     }


        stage ('Build') {
            steps {
                    script {
                        container('awscli') {
                            sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/u7n2x8y0'
                        }
                        container('docker') {
                            sh 'docker build -t ${ECR_REPO_REGISTRY}/vote:latest ./jenkins-votingapp/vote'
                            sh 'docker build -t ${ECR_REPO_REGISTRY}/result:latest ./jenkins-votingapp/result'
                            sh 'docker build -t ${ECR_REPO_REGISTRY}/worker:latest ./jenkins-votingapp/worker'
                            sh 'docker tag ${ECR_REPO_REGISTRY}/vote:latest ${ECR_REPO_REGISTRY}/vote:""$BUILD_ID""'
                            sh 'docker tag ${ECR_REPO_REGISTRY}/result:latest ${ECR_REPO_REGISTRY}/result:""$BUILD_ID""'
                            sh 'docker tag ${ECR_REPO_REGISTRY}/worker:latest ${ECR_REPO_REGISTRY}/worker:""$BUILD_ID""'
                            sh 'docker push ${ECR_REPO_REGISTRY}/vote:latest' 
                            sh 'docker push ${ECR_REPO_REGISTRY}/vote:$""$BUILD_ID""'
                            sh 'docker push ${ECR_REPO_REGISTRY}/worker:latest' 
                            sh 'docker push ${ECR_REPO_REGISTRY}/worker:$""$BUILD_ID""'
                            sh 'docker push ${ECR_REPO_REGISTRY}/result:latest' 
                            sh 'docker push ${ECR_REPO_REGISTRY}/result:$""$BUILD_ID""'
                        }                       
                    }   
            }
        }
        // stage ('Push') {
        //     steps {
        //         script {
        //                 docker.withRegistry('https://762247940679.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-instance-role') {
        //             docker.image('${ECR_REPO_REGISTRY}/vote:latest').push()
        //             docker.image('${ECR_REPO_REGISTRY}/vote:$""$BUILD_ID""').push()
        //                 }
        //         }
        //     }
        // }
    }
}